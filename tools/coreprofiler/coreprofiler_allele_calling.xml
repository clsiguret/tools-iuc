<tool id="coreprofiler_allele_calling" name="Coreprofiler allele_calling" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>
        Calls cgMLST alleles from a bacterial genome using a reference scheme
    </description>
    <macros>
        <import>macro.xml</import>
    </macros>
    <expand macro="biotools"/>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="aggressive"><![CDATA[
#import re

coreprofiler allele_calling
--query '$input_file'
--scheme-directory tests/data/kp_scheme_sample
--blast_db_path tmp_blast_db/tmp_blast_db.fasta 

##Autotag
--autotag_word_size 

##Scannew
--min_id_new_allele
--min_cov_new_allele
--min_cov_incomplete
--detailed

--out $output_file

    ]]></command>
    <inputs>
        <param name="input_file" type="data" format="fasta" multiple="true" label="Genome assemblies in FASTA format" help="Provide one or more genome assembly files in FASTA format." />
        <param name="input_scheme" type="select" label="Reference allele scheme" help="Select a pre-installed reference allele scheme. If the desired scheme is not listed, please contact your Galaxy administrator.">
            <options from_data_table="coreprofiler_scheme">
                <validator message="No reference allele scheme is available" type="no_options" />
            </options>
        </param>
        <section name="autotag_section" title="Autotag Parameters" expanded="true">
            <param argument="--autotag_word_size" type="integer" label="Autotag Word Size" help="Word size for autotag BLASTn, defined as 'min length of the shortest allele - 1'." value="0" />
        </section>
        <section name="scannew_section" title="Scannew Parameters" expanded="true">
            <param argument="--min_id_new_allele" type="float" label="Minimum identity for new alleles" help="Minimum identity percentage to consider an allele as a new one. Default is 90." value="90.0" min="0" max="100" />
            <param argument="--min_cov_new_allele" type="float" label="Minimum coverage for new alleles" help="Minimum coverage percentage to consider an allele as a new one. Default is 90." value="90.0" min="0" max="100" />
            <param argument="--min_cov_incomplete" type="float" label="Minimum coverage for incomplete alleles" help="Minimum coverage percentage to consider an allele as incomplete. Only used with the '--detailed' option." value="70.0" min="0" max="100" />
            <param argument="--detailed" type="boolean" label="Include detailed information on incomplete alleles" help="If enabled, incomplete alleles will be labeled as 'incomplete' instead of just a '-'. Default is off." truevalue="--detailed" falsevalue="" />
        </section>
    </inputs>
    <outputs>
        <data name="output_file" format="tabular" label="${tool.name} on ${on_string}: Allele calling report" />
    </outputs>
    <help><![CDATA[
Coreprofiler allele_calling
===========================

coreprofiler allele_calling_ performs cgMLST profiling by identifying alleles present in a bacterial genome assembly based on a reference allele scheme. 

It works in two steps:

1. **Autotag** (exact matches on reference database):

This step runs BLASTn with 100% identity, no gaps, and parameters optimized for speed. 
The output is parsed, and only results with 100% coverage are kept.

2. **Scannew** (detection of new alleles):

In this step, loci with no exact match from the autotag step are selected. A BLAST database is created for those loci files, and a looser BLASTn search is performed. 

The best hit is kept for each locus and classified as follows:
   * If identity > 90% and coverage > 90%, the locus is considered a new allele.
   * If identity > 90% and coverage between 70% and 90%, the allele is present but incomplete ("X").
   * If identity < 90% or coverage < 70%, the allele is considered missing ("-").


Usage
-----

1. Select your genome contigs (in FASTA format).
2. Select a pre-installed reference allele scheme. This requires you to specify the specific organism you are using.
3. Change the parameters (or not) to perform allele matching and detection.

   * **autotag**: Finds exact allele matches using BLASTn with 100% identity and coverage.
   * **scannew**: Detects potential new or incomplete alleles through relaxed BLASTn searches.

4. Run the tool.

Input
-----

Genomes Assembly
````````````````

The input genome assembly must be in FASTA format. This is the sequence that will be scanned for matching alleles.


Reference Database
``````````````````

The reference database is a a pre-installed scheme of known alleles and loci used to identify alleles in the provided genome. Ensure you specify the appropriate reference database for the organism or group under study. If the desired scheme is not listed, please contact your Galaxy administrator.


Output
------

The `allele_calling` command produces a tabular profile listing the identified alleles for each locus, including new or missing alleles when applicable.

    ]]></help>
    <expand macro="citations"/>
</tool>
